//

int tta_state = 0; 
 
unsigned char tta_ctrl_timer[2];
unsigned int * tta_p_ctrl_timer;

unsigned int *tta_phightime;


unsigned int code tta_maxwidth = 2500 * 2;		//12T模式，24M频率，所以乘2。		//工作数据M12[3]	



#if	 0
//#THREADBEGIN#
void tta( int *pstate )
{
	//#FUNCBEGIN#
	
	tta_phightime = &(M12[3].m_hi_tta);

	tta_p_ctrl_timer = (unsigned int*)tta_ctrl_timer;

	*tta_p_ctrl_timer = 65536 - ( tta_maxwidth - *tta_phightime * 2 );
	

	while(1)
	{
		//if(1)
		//{
		//	TH0 = tta_ctrl_timer[0];
		//	TL0 = tta_ctrl_timer[1];

		//	*tta_p_ctrl_timer = 65536 - ( tta_maxwidth - *tta_phightime * 2 );
		//
		//	##DELAY#

		//	OUTtta = 0;
		//}


		//if(1)
		//{
		//	TH0 = tta_ctrl_timer[0];
		//	TL0 = tta_ctrl_timer[1];

		//	*tta_p_ctrl_timer = 65536 - ( *tta_phightime * 2 );

		//	sharedata_main_followrefresh( &(M12[0]) , &(M12[1]), &(M12[2]), sizeof( struct M12Pwm_t ) ); 
		//
		//	##DELAY#

		//	OUTtta = 1;
		//}


 		if(1)
		{
			*tta_p_ctrl_timer = 65536 - ( tta_maxwidth - *tta_phightime * 2 );
			TH0 = tta_ctrl_timer[0];
			TL0 = tta_ctrl_timer[1];

			##DELAY#
			
			LET_OUTtta_LOW;

			ta4tk( &ta4tk_state );

		}


		if(1)
		{
			*tta_p_ctrl_timer = 65536 - ( *tta_phightime * 2 );
			TH0 = tta_ctrl_timer[0];
			TL0 = tta_ctrl_timer[1];
		
			//sharedata_main_followrefresh( &(M12[0]) , &(M12[1]), &(M12[2]), sizeof( struct M12Pwm_t ) ); 

			sharedata_interrupt_followrefresh( &(M12[1]) , &(M12[2]), &(M12[3]), sizeof( struct M12Pwm_t ) ); 

			##DELAY#

			LET_OUTtta_HIGH;
		}
	}

	//#FUNCEND#
}
//#THREADEND#
#endif


		 

